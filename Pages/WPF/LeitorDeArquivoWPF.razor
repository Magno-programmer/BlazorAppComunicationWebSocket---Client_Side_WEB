@page "/LeitorDeArquivoWPF"
@inject NavigationManager Navigation;

<h3>Protótipo de Integração - Blazor com WebSocket</h3>

<div class="container">

    <!-- Gerenciamento de Arquivos -->
    <div class="mb-4">
        <h4>Gerenciamento de Arquivos:</h4>
        <button class="btn btn-primary me-2" @onclick="GenerateFile">Gerar Arquivo</button>
        <button class="btn btn-secondary" @onclick="OpenFile">Abrir Arquivo</button>
    </div>

    <!-- Exibição de Mensagens -->
    <div style="margin: 10px">
        @MessageFeedBack
    </div>

    <!-- Modal -->
    @if (ShowModal)
    {
        <div class="modal" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Conteúdo do Arquivo</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <pre style="background-color: #f9f9f9; padding: 10px; border: 1px solid #ddd;">
                            @FileContent
                        </pre>

                        <div style="margin: 10px">
                            @((MarkupString)MessageDownload)
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Fechar</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string MessageFeedBack = "";
    private string MessageDownload = string.Empty;
    private bool ShowModal = false;
    private string FileContent = string.Empty;

    // Método para gerar um arquivo
    private void GenerateFile()
    {
        try
        {
            string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "arquivo_integração.txt");
            File.WriteAllText(filePath, "Conteúdo do arquivo de integração.");
            MessageFeedBack = "Arquivo gerado com sucesso!";
        }
        catch (Exception ex)
        {
            MessageFeedBack = $"Erro ao gerar o arquivo";
            Console.WriteLine($"Erro no GenerateFile: {ex}");
        }
    }

    private void OpenFile()
    {
        try
        {
            string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "arquivo_integração.txt");
            if (File.Exists(filePath))
            {
                FileContent = File.ReadAllText(filePath);
                ShowModal = true; // Exibe o modal

                var bytes = File.ReadAllBytes(filePath);
                var base64 = Convert.ToBase64String(bytes);
                var contentType = "application/octet-stream";
                var fileName = "arquivo_integração.txt";

                // Gera um link para download com o nome do arquivo
                var downloadUrl = $"data:{contentType};base64,{base64}";
                var link = $"<a href=\"{downloadUrl}\" download=\"{fileName}\">Clique aqui para baixar o arquivo</a>";

                // Atualiza o feedback com o link
                MessageDownload = link;
            }
            else
            {
                MessageFeedBack = "Arquivo não encontrado.";
            }
        }
        catch (Exception ex)
        {
            MessageFeedBack = $"Erro ao abrir o arquivo: {ex.Message}";
            Console.WriteLine($"Erro no OpenFile: {ex}");
        }
    }


    private void CloseModal()
    {
        ShowModal = false; // Fecha o modal
    }

}
